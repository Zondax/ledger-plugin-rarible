import "core-js/stable";
import "regenerator-runtime/runtime";
import {waitForAppScreen, zemu, genericTx, networks} from './test.fixture';
import {ethers} from "ethers";

const {exchangeNetworks} = networks

// Transactions can be found on etherscan with https://ropsten.etherscan.io/address/0xd4224267C4aB4a184bD1aa066b3361E70EfBBEaf

test.each(exchangeNetworks)("%s - Match Orders from Contract", async ({name, device, abi, contractAddr}) => {
    await zemu(device, name, async (sim, eth) => {
        const contract = new ethers.Contract(contractAddr, abi);

        // Constants used to create the transaction
        const orderLeft = {
            maker: "0xB07952A55bF9c45C268F37C3631823Df50ac721a",
            makeAsset: {
                assetType: {
                    assetClass: Buffer.from("30450221", "hex"),
                    data: Buffer.from("c45C268F37C3631823Df50ac721a", "hex")
                },
                value: 1000
            },
            taker: "0x411FAF48009A9479b24298B34C9Aa224d7D80805",
            takeAsset: {
                assetType: {
                    assetClass: Buffer.from("69842188", "hex"),
                    data: Buffer.from("433e0b9f9b50dd124ea3041f223a", "hex")
                },
                value: 1000
            },
            salt: 1000,
            start: 1000,
            end: 1000,
            dataType: Buffer.from("45152201", "hex"),
            data: Buffer.from("a922c745e244fa3045022100f6e1", "hex")
        }
        const signatureLeft = Buffer.from("3045022100f6e1a922c745e244fa", "hex")
        const orderRight = {
            maker: "0x45d2bafe56c85433e0b9f9b50dd124ea3041f223",
            makeAsset: {
                assetType: {
                    assetClass: Buffer.from("12354545", "hex"),
                    data: Buffer.from("85433e0b9f9b50dd124ea3041f22", "hex")
                },
                value: 1000
            },
            taker: "0x15557c8b7246C38EE71eA6dc69e4347F5DAc2104",
            takeAsset: {
                assetType: {
                    assetClass: Buffer.from("69e4347F", "hex"),
                    data: Buffer.from("6C38EE71eA6dc69e4347F5DAc210", "hex")
                },
                value: 1000
            },
            salt: 1000,
            start: 1000,
            end: 1000,
            dataType: Buffer.from("78945644", "hex"),
            data: Buffer.from("46C38EE71eA6dc69e4347F5DAA", "hex")
        }
        const signatureRight = Buffer.from("e1a922c745e243045022100f64fa", "hex")

        const {data} = await contract.populateTransaction.matchOrders(orderLeft, signatureLeft, orderRight, signatureRight);

        // Get the generic transaction template
        let unsignedTx = genericTx;
        // Modify `to` to make it interact with the contract
        unsignedTx.to = contractAddr;
        // Modify the attached data
        unsignedTx.data = data;

        // Create serializedTx and remove the "0x" prefix
        const serializedTx = ethers.utils.serializeTransaction(unsignedTx).slice(2);

        const tx = eth.signTransaction(
            "44'/60'/0'/0",
            serializedTx,
        );

        // Wait for the application to actually load and parse the transaction
        await waitForAppScreen(sim);

        // Navigate the display by pressing the right button 10 times, then pressing both buttons to accept the transaction.
        await sim.navigateAndCompareSnapshots('.', `${device}_${name}_match_orders_from_contract`, [device === "nanos" ? 15 : 7, 0]);

        await tx;
    })();
})

test.each(exchangeNetworks)("%s - Match Orders from Etherscan", async ({name, device, abi, contractAddr}) => {
    await zemu(device, name, async (sim, eth) => {
        // Rather than constructing the tx ourselves, one can can obtain it directly through etherscan.
        // The rawTx of the tx up above is accessible through: https://etherscan.io/tx/0xe2e776df2cfaed5edecf0c54a9dfe07f3ad5e820781ba185130e8e61fd7c097c
        // In this case, you could remove the above code, and simply create your tx like so:
        const data = "0xe99a3f800000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000044000000000000000000000000000000000000000000000000000000000000004c000000000000000000000000000000000000000000000000000000000000008a000000000000000000000000086ab9946a5f5017ee5bfedc3867131acbac5f26e0000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e09198d510205fa2498d86cbb08b8d0224e501ad2f39bcc50506d3d8f38c25b27c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006422528423d235ef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000016345785d8a00008ae85d840000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000020000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001f63c282500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000200000000000000000000000001d3ada5856b14d9df178ea5cab137d436dc55f1d00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000001cf0df2a5a20cd61d68d4489eebbf85b8d39e18a00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000041c26960d4d1a6a654cc2c55bbdfdb16528dd0ce87e7dd68c01a393c25571804d83383e155d6cbfa8c663e54c0b97ef60b23e0b5a013cb880e491779fb1811db251c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f7712e3c928b556c6476b42e011085bad6d8a94000000000000000000000000000000000000000000000000000000000000012000000000000000000000000086ab9946a5f5017ee5bfedc3867131acbac5f26e000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006422528423d235ef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000173ad214600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000400000000000000000000000001d3ada5856b14d9df178ea5cab137d436dc55f1d00000000000000000000000000000000000000000000000000000000000008020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000016345785d8a00008ae85d840000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000020000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000001cf0df2a5a20cd61d68d4489eebbf85b8d39e18a0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000109616c6c64617461";

        // Get the generic transaction template
        let unsignedTx = genericTx;
        // Modify `to` to make it interact with the contract
        unsignedTx.to = contractAddr;
        // Modify the attached data
        unsignedTx.data = data;

        // Create serializedTx and remove the "0x" prefix
        const serializedTx = ethers.utils.serializeTransaction(unsignedTx).slice(2);

        const tx = eth.signTransaction(
            "44'/60'/0'/0",
            serializedTx
        );

        // Wait for the application to actually load and parse the transaction
        await waitForAppScreen(sim);
        // Navigate the display by pressing the right button 10 times, then pressing both buttons to accept the transaction.
        // EDIT THIS: modify `10` to fix the number of screens you are expecting to navigate through.
        await sim.navigateAndCompareSnapshots('.', `${device}_${name}_match_orders_from_etherscan`, [device === "nanos" ? 15 : 7, 0]);

        await tx;
    })();
})